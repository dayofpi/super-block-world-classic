package com.dayofpi.super_block_world.registry;

import com.dayofpi.super_block_world.Main;
import com.dayofpi.super_block_world.audio.SoundGroups;
import com.dayofpi.super_block_world.audio.Sounds;
import com.dayofpi.super_block_world.common.blocks.*;
import com.dayofpi.super_block_world.util.AmanitaGenerator;
import com.dayofpi.super_block_world.util.BellGenerator;
import com.dayofpi.super_block_world.util.DarkAmanitaGenerator;
import com.dayofpi.super_block_world.util.EnumUtil;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.fabricmc.fabric.api.registry.FlammableBlockRegistry;
import net.minecraft.block.*;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.state.property.Properties;
import net.minecraft.util.DyeColor;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.util.registry.Registry;
import net.minecraft.util.registry.RegistryEntry;

import java.util.function.ToIntFunction;

import static net.minecraft.block.AbstractBlock.OffsetType.XYZ;
import static net.minecraft.block.AbstractBlock.OffsetType.XZ;

public class ModBlocks {
    public static final Block COIN = new CoinBlock(Sounds.ITEM_COIN, FabricBlockSettings.of(Material.DECORATION, MapColor.GOLD).sounds(BlockSoundGroup.METAL).breakInstantly().nonOpaque().noCollision());
    public static final Block STAR_COIN = new CoinBlock(Sounds.ITEM_STAR_COIN, FabricBlockSettings.copyOf(COIN));
    public static final Block POWER_STAR = new PowerStarBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.GOLD).sounds(BlockSoundGroup.METAL).luminance(5).breakInstantly().nonOpaque().noCollision());
    public static final Block ZTAR = new ZtarBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.BLACK).sounds(BlockSoundGroup.METAL).breakInstantly().nonOpaque().noCollision());
    public static final Block WARP_FRAME = new WarpFrameBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).sounds(BlockSoundGroup.METAL).strength(10.0F, 1200.0F).requiresTool());
    public static final Block REINFORCED_WARP_FRAME = new PillarBlock(FabricBlockSettings.of(Material.METAL, MapColor.GRAY).sounds(SoundGroups.TOADSTONE).strength(-1, 1200.0F));
    public static final Block BOWSER_LOCK = new Block(FabricBlockSettings.of(Material.METAL, MapColor.BLACK).sounds(BlockSoundGroup.METAL).strength(-1, 3600000.0F).allowsSpawning((state, world, pos, type) -> false));
    public static final Block EMPTY_BLOCK = new EmptyBlock(FabricBlockSettings.of(Material.METAL, MapColor.BROWN).sounds(BlockSoundGroup.METAL).strength(2.5F, 1200.0F).requiresTool());
    public static final Block QUESTION_BLOCK = new QuestionBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).nonOpaque().sounds(BlockSoundGroup.METAL).strength(2.5F, 2.0F).requiresTool());
    public static final Block EXCLAMATION_BLOCK = new ExclamationBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).sounds(BlockSoundGroup.METAL).strength(2.5F, 2.0F).requiresTool());
    public static final Block DASH_BLOCK = new DashBlock(FabricBlockSettings.of(Material.GLASS, MapColor.YELLOW).luminance(blockState -> blockState.get(DashBlock.USED) ? 15 : 0).sounds(BlockSoundGroup.GLASS).strength(0.3F));
    public static final Block PULL_BLOCK = new PullBlock(FabricBlockSettings.of(Material.METAL, MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.METAL).strength(3.5F, 5.0F).requiresTool());
    public static final Block PROPELLER_BLOCK = new PropellerBlock(FabricBlockSettings.of(Material.STONE, MapColor.DARK_AQUA).strength(3.0F).requiresTool());
    public static final Block SPIKE_TRAP = new SpikeTrapBlock(FabricBlockSettings.of(Material.METAL).strength(5.0F).requiresTool().sounds(BlockSoundGroup.METAL));
    public static final Block ON_OFF_SWITCH = new OnOffSwitchBlock(FabricBlockSettings.of(Material.METAL, (state) -> state.get(Properties.POWERED) ? MapColor.RED : MapColor.BLUE).sounds(BlockSoundGroup.METAL).strength(3.5F, 5.0F).requiresTool());
    public static final Block DOTTED_LINE_BLOCK = new DottedLineBlock(FabricBlockSettings.of(Material.METAL, (state) -> state.get(Properties.DISTANCE_1_7) < 7 ? MapColor.BLUE : MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.METAL).strength(3.5F, 5.0F).requiresTool().nonOpaque());
    public static final Block RED_DOTTED_LINE_BLOCK = new DottedLineBlock(FabricBlockSettings.of(Material.METAL, (state) -> state.get(Properties.DISTANCE_1_7) < 7 ? MapColor.BRIGHT_RED : MapColor.RED).sounds(BlockSoundGroup.METAL).strength(3.5F, 5.0F).requiresTool().nonOpaque());
    public static final Block POW_BLOCK = new PowBlock(FabricBlockSettings.of(Material.METAL, MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.METAL).strength(5.0F, 2.0F).requiresTool().nonOpaque());
    public static final Block P_SWITCH = new PSwitchBlock(FabricBlockSettings.of(Material.METAL, MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.METAL).strength(1.5F).requiresTool().nonOpaque());
    public static final Block STONE_TORCH = new StoneTorchBlock(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_LIGHT_GRAY).strength(1.5F, 6.0F).requiresTool().luminance(createLightLevelFromLitBlockState(0, 15)));
    public static final Block CHINCHO_TORCH = new ChinchoTorchBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.DIAMOND_BLUE).strength(1.5F).luminance(createLightLevelFromLitBlockState(0, 10)).sounds(BlockSoundGroup.BONE));
    public static final Block BOO_LANTERN = new BooLanternBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.DARK_AQUA).strength(0.4F).nonOpaque().luminance(createLightLevelFromLitBlockState(3, 14)));
    public static final Block GIRDER = new GirderBlock(FabricBlockSettings.of(Material.METAL, MapColor.TERRACOTTA_PINK).sounds(BlockSoundGroup.COPPER).strength(5.0F, 6.0F).requiresTool().nonOpaque());
    public static final Block DONUT_BLOCK = new DonutBlock(FabricBlockSettings.of(Material.SOIL, MapColor.DIRT_BROWN).sounds(BlockSoundGroup.GRAVEL).strength(0.6F));
    public static final Block JUMP_BLOCK = new JumpBlock(FabricBlockSettings.of(Material.WOOD, MapColor.WHITE_GRAY).sounds(BlockSoundGroup.WOOD).strength(0.8F));
    public static final Block TRAMPOLINE = new TrampolineBlock(FabricBlockSettings.of(Material.WOOD, MapColor.LIME).sounds(BlockSoundGroup.WOOD).nonOpaque());
    public static final Block REDSTONE_TRAMPOLINE = new RedstoneTrampolineBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC).sounds(BlockSoundGroup.WOOD));
    public static final Block QUESTION_BOX = new QuestionBoxBlock(FabricBlockSettings.of(Material.WOOD).sounds(BlockSoundGroup.WOOD).strength(0.8F));
    public static final Block STAR_PANEL = new PaneBlock(FabricBlockSettings.of(Material.AMETHYST, MapColor.CLEAR).strength(0.6F).sounds(BlockSoundGroup.MEDIUM_AMETHYST_BUD).nonOpaque());
    public static final Block BRONZE_ORE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.LIGHT_BLUE_GRAY).strength(3.0F, 3.0F).requiresTool());
    public static final Block RAW_BRONZE_BLOCK = new Block(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_ORANGE).strength(5.0F, 6.0F).requiresTool());
    public static final Block BRONZE_BLOCK = new Block(FabricBlockSettings.of(Material.METAL, MapColor.TERRACOTTA_ORANGE).sounds(BlockSoundGroup.METAL).strength(5.0F, 6.0F).requiresTool());
    public static final Block CERISE_BLOCK = new Block(FabricBlockSettings.of(Material.METAL, MapColor.RED).sounds(BlockSoundGroup.METAL).strength(5.0F, 16.0F).requiresTool());
    public static final Block CERISE_BRICKS = new Block(FabricBlockSettings.copyOf(CERISE_BLOCK));
    public static final Block CERISE_TILES = new Block(FabricBlockSettings.copyOf(CERISE_BLOCK));
    public static final Block BLACK_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BLACK));
    public static final Block RED_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.RED));
    public static final Block GREEN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.GREEN));
    public static final Block BROWN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BROWN));
    public static final Block BLUE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BLUE));
    public static final Block PURPLE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.PURPLE));
    public static final Block CYAN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.CYAN));
    public static final Block LIGHT_GRAY_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIGHT_GRAY));
    public static final Block GRAY_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.GRAY));
    public static final Block PINK_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.PINK));
    public static final Block LIME_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIME));
    public static final Block YELLOW_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.YELLOW));
    public static final Block LIGHT_BLUE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIGHT_BLUE));
    public static final Block MAGENTA_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.MAGENTA));
    public static final Block ORANGE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.ORANGE));
    public static final Block WHITE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.WHITE));
    public static final Block BRONZE_STAIRS = new ModStairsBlock(BRONZE_BLOCK);
    public static final Block BRONZE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(BRONZE_BLOCK));
    public static final Block TOADSTOOL_SOIL = new ToadstoolSoilBlock(FabricBlockSettings.of(Material.SOIL, MapColor.TERRACOTTA_YELLOW).strength(0.6F).sounds(BlockSoundGroup.GRAVEL));
    public static final Block TOADSTOOL_PATH = new ToadstoolPathBlock(FabricBlockSettings.copyOf(TOADSTOOL_SOIL));
    public static final Block COARSE_TOADSTOOL_SOIL = new Block(FabricBlockSettings.copyOf(TOADSTOOL_SOIL));
    public static final Block TOADSTOOL_GRASS = new ToadstoolGrassBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.LIME).strength(0.8F).sounds(BlockSoundGroup.GRASS));
    public static final Block TOADSTOOL_TURF = new Block(FabricBlockSettings.copyOf(TOADSTOOL_GRASS));
    public static final Block CHERRY_SOIL = new CherrySoilBlock(FabricBlockSettings.of(Material.SOIL, MapColor.PALE_GREEN).strength(0.6F).sounds(SoundGroups.ICY_SOIL));
    public static final Block CHERRY_PATH = new CherryPathBlock(FabricBlockSettings.copyOf(CHERRY_SOIL).mapColor(MapColor.PALE_YELLOW));
    public static final Block CHERRY_GRASS = new CherrySoilBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.PINK).strength(0.8F).sounds(SoundGroups.ICY_SOIL));
    public static final Block GRITZY_SAND = new SandBlock(16372053, FabricBlockSettings.of(Material.AGGREGATE, MapColor.YELLOW).strength(1.0F, 3.0F).sounds(BlockSoundGroup.SAND));
    public static final Block QUICKSAND = new QuicksandBlock(FabricBlockSettings.of(Material.SOIL, MapColor.ORANGE).strength(0.5F).sounds(BlockSoundGroup.SAND).noCollision().allowsSpawning((state, world, pos, type) -> false));
    public static final Block GRITZY_SANDSTONE = new Block(FabricBlockSettings.of(Material.AGGREGATE, MapColor.YELLOW).strength(1.0F, 3.0F).requiresTool());
    public static final Block GRITZY_SANDSTONE_STAIRS = new ModStairsBlock(GRITZY_SANDSTONE);
    public static final Block GRITZY_SANDSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block CHISELED_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block CUT_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block SMOOTH_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block CHARROCK = new Block(FabricBlockSettings.of(Material.STONE, MapColor.DARK_CRIMSON).strength(1.4F, 5.0F).requiresTool());
    public static final Block CLOUD_BLOCK = new CloudBlock(FabricBlockSettings.of(Material.POWDER_SNOW).strength(0.2F).sounds(BlockSoundGroup.POWDER_SNOW));
    public static final Block CLOUD_STAIRS = new ModStairsBlock(CLOUD_BLOCK);
    public static final Block CLOUD_SLAB = new CloudSlab(FabricBlockSettings.copyOf(CLOUD_BLOCK));
    public static final Block HAPPY_CLOUD = new HappyCloudBlock(FabricBlockSettings.copyOf(CLOUD_BLOCK));
    public static final Block TOADSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_BROWN).sounds(SoundGroups.TOADSTONE).strength(1.5F, 6.0F).requiresTool());
    public static final Block FAKE_BLOCK = new FakeBlock(FabricBlockSettings.copyOf(TOADSTONE).strength(1.0F, 6.0F));
    public static final Block TOADSTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_BRICK_STAIRS = new ModStairsBlock(TOADSTONE);
    public static final Block TOADSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block CHISELED_TOADSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_BRICKS = new BrickBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block SMOOTH_TOADSTONE = new BrickBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block GLOOMSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.DARK_AQUA).sounds(SoundGroups.TOADSTONE).strength(1.5F, 6.0F).requiresTool());
    public static final Block GLOOMSTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_BRICK_STAIRS = new ModStairsBlock(GLOOMSTONE);
    public static final Block GLOOMSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block CHISELED_GLOOMSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_BRICKS = new BrickBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block SMOOTH_GLOOMSTONE = new BrickBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block SEASTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.EMERALD_GREEN).sounds(SoundGroups.TOADSTONE).strength(1.5F, 6.0F).requiresTool());
    public static final Block SEASTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(SEASTONE));
    public static final Block SEASTONE_BRICK_STAIRS = new ModStairsBlock(SEASTONE);
    public static final Block SEASTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(SEASTONE));
    public static final Block CHISELED_SEASTONE_BRICKS = new Block(FabricBlockSettings.copyOf(SEASTONE));
    public static final Block SEASTONE_BRICKS = new BrickBlock(FabricBlockSettings.copyOf(SEASTONE));
    public static final Block HARDSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.LIGHT_GRAY).sounds(SoundGroups.TOADSTONE).strength(3.0F, 200.0F).requiresTool());
    public static final Block HARDSTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_BRICK_STAIRS = new ModStairsBlock(HARDSTONE);
    public static final Block HARDSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block CRACKED_HARDSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block CHISELED_HARDSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block POLISHED_HARDSTONE_STAIRS = new ModStairsBlock(HARDSTONE);
    public static final Block POLISHED_HARDSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block CHISELED_HARDSTONE = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_PILLAR = new PillarBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block POLISHED_HARDSTONE = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_STAIRS = new ModStairsBlock(HARDSTONE);
    public static final Block HARDSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block ROYALITE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.OFF_WHITE).sounds(SoundGroups.TOADSTONE).strength(1.8F, 10.0F));
    public static final Block ROYALITE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(ROYALITE));
    public static final Block ROYALITE_BRICK_STAIRS = new ModStairsBlock(ROYALITE);
    public static final Block ROYALITE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(ROYALITE));
    public static final Block CHISELED_ROYALITE_BRICKS = new Block(FabricBlockSettings.copyOf(ROYALITE));
    public static final Block ROYALITE_BRICKS = new BrickBlock(FabricBlockSettings.copyOf(ROYALITE));
    public static final Block GOLDEN_BRICKS = new BrickBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).sounds(BlockSoundGroup.METAL).strength(1.5F, 6.0F).requiresTool());
    public static final Block GOLDEN_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(GOLDEN_BRICKS));
    public static final Block GOLDEN_BRICK_STAIRS = new ModStairsBlock(GOLDEN_BRICKS);
    public static final Block GOLDEN_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GOLDEN_BRICKS));
    public static final Block GOLDEN_TILES = new Block(FabricBlockSettings.copyOf(GOLDEN_BRICKS));
    public static final Block CRYSTAL_BRICKS = new BrickBlock(FabricBlockSettings.of(Material.AMETHYST, MapColor.PURPLE).sounds(BlockSoundGroup.AMETHYST_BLOCK).strength(1.5F, 6.0F).requiresTool());
    public static final Block CRYSTAL_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(CRYSTAL_BRICKS));
    public static final Block CRYSTAL_BRICK_STAIRS = new ModStairsBlock(CRYSTAL_BRICKS);
    public static final Block CRYSTAL_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(CRYSTAL_BRICKS));
    public static final Block VANILLATE = new VanillateBlock(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_LIGHT_BLUE).strength(1.5F, 6.0F).requiresTool());
    public static final Block TOPPED_VANILLATE = new Block(FabricBlockSettings.copyOf(VANILLATE).mapColor(MapColor.TERRACOTTA_LIGHT_GRAY));
    public static final Block AMETHYST_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE), UniformIntProvider.create(0, 2));
    public static final Block GOLD_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE), UniformIntProvider.create(0, 2));
    public static final Block IRON_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE), UniformIntProvider.create(0, 2));
    public static final Block COAL_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE), UniformIntProvider.create(0, 2));
    public static final Block VANILLATE_CRUMBLE = new SandBlock(12176828, FabricBlockSettings.of(Material.AGGREGATE, MapColor.TERRACOTTA_LIGHT_BLUE).strength(1.2F).requiresTool());
    public static final Block VANILLATE_BRICKS = new Block(FabricBlockSettings.copyOf(VANILLATE));
    public static final Block VANILLATE_TILES = new Block(FabricBlockSettings.copyOf(VANILLATE));
    public static final Block AMANITA_LOG = createLogBlock(MapColor.TERRACOTTA_YELLOW, MapColor.SPRUCE_BROWN);
    public static final Block BELL_LOG = new LogBlock(FabricBlockSettings.copyOf(AMANITA_LOG).mapColor(MapColor.OFF_WHITE));
    public static final Block AMANITA_WOOD = new LogBlock(FabricBlockSettings.copyOf(AMANITA_LOG).mapColor(MapColor.SPRUCE_BROWN));
    public static final Block BELL_WOOD = new LogBlock(FabricBlockSettings.copyOf(AMANITA_WOOD).mapColor(MapColor.OFF_WHITE));
    public static final Block DARK_AMANITA_WOOD = new LogBlock(FabricBlockSettings.copyOf(AMANITA_WOOD).mapColor(MapColor.DIRT_BROWN));
    public static final Block STRIPPED_AMANITA_LOG = new PillarBlock(FabricBlockSettings.of(Material.WOOD, MapColor.TERRACOTTA_YELLOW).strength(2.0F).sounds(BlockSoundGroup.WOOD));
    public static final Block STRIPPED_AMANITA_WOOD = new PillarBlock(FabricBlockSettings.copyOf(STRIPPED_AMANITA_LOG));
    public static final Block AMANITA_PLANKS = new Block(FabricBlockSettings.of(Material.WOOD, MapColor.TERRACOTTA_YELLOW).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD));
    public static final Block BELL_PLANKS = new Block(FabricBlockSettings.copyOf(AMANITA_PLANKS).mapColor(MapColor.OFF_WHITE));
    public static final Block BELL_PRESSURE_PLATE = new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, FabricBlockSettings.copyOf(BELL_PLANKS).strength(0.5F).noCollision());
    public static final Block BELL_FENCE_GATE = new FenceGateBlock(FabricBlockSettings.copyOf(BELL_PLANKS));
    public static final Block BELL_FENCE = new FenceBlock(FabricBlockSettings.copyOf(BELL_PLANKS));
    public static final Block BELL_TRAPDOOR = new TrapdoorBlock(FabricBlockSettings.copyOf(BELL_PLANKS).strength(3.0F).nonOpaque().allowsSpawning((state, world, pos, type) -> false));
    public static final Block BELL_DOOR = new DoorBlock(FabricBlockSettings.copyOf(BELL_PLANKS).strength(3.0F));
    public static final Block BELL_STAIRS = new ModStairsBlock(BELL_PLANKS);
    public static final Block BELL_SLAB = new SlabBlock(FabricBlockSettings.copyOf(BELL_PLANKS));
    public static final Block DARK_AMANITA_PLANKS = new Block(FabricBlockSettings.copyOf(AMANITA_PLANKS).mapColor(MapColor.SPRUCE_BROWN));
    public static final Block DARK_AMANITA_PRESSURE_PLATE = new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS).strength(0.5F).noCollision());
    public static final Block DARK_AMANITA_FENCE_GATE = new FenceGateBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS));
    public static final Block DARK_AMANITA_FENCE = new FenceBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS));
    public static final Block DARK_AMANITA_TRAPDOOR = new TrapdoorBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS).strength(3.0F).nonOpaque().allowsSpawning((state, world, pos, type) -> false));
    public static final Block DARK_AMANITA_DOOR = new DoorBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS).strength(3.0F));
    public static final Block DARK_AMANITA_STAIRS = new ModStairsBlock(DARK_AMANITA_PLANKS);
    public static final Block DARK_AMANITA_SLAB = new SlabBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS));
    public static final Block AMANITA_PRESSURE_PLATE = new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(0.5F).noCollision());
    public static final Block AMANITA_FENCE_GATE = new FenceGateBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_FENCE = new FenceBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_TRAPDOOR = new TrapdoorBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(3.0F).nonOpaque().allowsSpawning((state, world, pos, type) -> false));
    public static final Block AMANITA_DOOR = new DoorBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(3.0F));
    public static final Block AMANITA_STAIRS = new ModStairsBlock(AMANITA_PLANKS);
    public static final Block AMANITA_SLAB = new SlabBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_BUTTON = new WoodenButtonBlock(FabricBlockSettings.of(Material.DECORATION).noCollision().strength(0.5f).sounds(BlockSoundGroup.WOOD));
    public static final Block AMANITA_LEAVES = createLeavesBlock();
    public static final Block FRUITING_AMANITA_LEAVES = createLeavesBlock();
    public static final Block DARK_AMANITA_LOG = createLogBlock(MapColor.SPRUCE_BROWN, MapColor.DIRT_BROWN);
    public static final Block STRIPPED_DARK_AMANITA_LOG = new PillarBlock(FabricBlockSettings.of(Material.WOOD, MapColor.DIRT_BROWN).strength(2.0F).sounds(BlockSoundGroup.WOOD));
    public static final Block STRIPPED_BELL_WOOD = new PillarBlock(FabricBlockSettings.copyOf(STRIPPED_DARK_AMANITA_LOG));
    public static final Block STRIPPED_DARK_AMANITA_WOOD = new PillarBlock(FabricBlockSettings.copyOf(STRIPPED_DARK_AMANITA_LOG));
    public static final Block DARK_AMANITA_BUTTON = new WoodenButtonBlock(FabricBlockSettings.of(Material.DECORATION).noCollision().strength(0.5f).sounds(BlockSoundGroup.WOOD));
    public static final Block DARK_AMANITA_LEAVES = createLeavesBlock();
    public static final Block FRUITING_DARK_AMANITA_LEAVES = createLeavesBlock();
    public static final Block STRIPPED_BELL_LOG = new PillarBlock(FabricBlockSettings.of(Material.WOOD, MapColor.OFF_WHITE).strength(2.0F).sounds(BlockSoundGroup.WOOD));
    public static final Block BELL_BUTTON = new WoodenButtonBlock(FabricBlockSettings.of(Material.DECORATION).noCollision().strength(0.5f).sounds(BlockSoundGroup.WOOD));
    public static final Block BELL_CAP = createLeavesBlock(MapColor.PALE_YELLOW);
    public static final Block DARKENED_BELL_CAP = createLeavesBlock(MapColor.TERRACOTTA_YELLOW);
    public static final Block GREEN_MUSHROOM_BLOCK = new MushroomBlock(FabricBlockSettings.of(Material.WOOD, MapColor.GREEN).strength(0.2f).sounds(BlockSoundGroup.WOOD).luminance(3));
    public static final Block YELLOW_MUSHROOM_BLOCK = new MushroomBlock(FabricBlockSettings.of(Material.WOOD, MapColor.TERRACOTTA_YELLOW).strength(0.2f).sounds(BlockSoundGroup.WOOD));
    public static final Block BEANSTALK_BLOCK = new PillarBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.PALE_GREEN).strength(4.0F).sounds(BlockSoundGroup.NETHER_STEM));
    public static final Block STRAWBERRY_CORAL_BLOCK = new Block(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.PINK).strength(2.5F).sounds(BlockSoundGroup.CORAL));
    public static final Block JELLYBEAM = new JellybeamBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.SLIME).luminance(11));
    public static final Block FROZEN_MUNCHER = new FrozenMuncherBlock(FabricBlockSettings.of(Material.ICE).sounds(BlockSoundGroup.GLASS).ticksRandomly().slipperiness(0.98f).strength(0.7f).nonOpaque());
    public static final Block GLOW_BLOCK = new GlowBlock(FabricBlockSettings.of(Material.METAL, MapColor.WHITE).sounds(BlockSoundGroup.METAL).luminance(15));
    public static final Block BILL_BLASTER = new BillBlasterBlock(FabricBlockSettings.of(Material.METAL, MapColor.DEEPSLATE_GRAY).sounds(BlockSoundGroup.METAL).strength(6.0F, 1200.0F));
    public static final Block RAINBOW_TILES = new PillarBlock(FabricBlockSettings.of(Material.AMETHYST, MapColor.WHITE).sounds(BlockSoundGroup.AMETHYST_BLOCK).strength(0.3F));
    public static final Block RAINBOW_TILE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(RAINBOW_TILES));
    public static final Block RAINBOW_TILE_STAIRS = new ModStairsBlock(RAINBOW_TILES);
    public static final Block YOSHI_EGG = new YoshiEggBlock(FabricBlockSettings.of(Material.EGG, MapColor.OFF_WHITE).strength(0.2F).nonOpaque());
    public static final Block LIL_OINK_EGG = new LilOinkEggBlock(FabricBlockSettings.of(Material.EGG, MapColor.WHITE).ticksRandomly().strength(0.2F).nonOpaque());
    public static final Block WHITE_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.of(Material.METAL, MapColor.WHITE).sounds(BlockSoundGroup.COPPER).strength(5.0F, 6.0F).requiresTool());
    public static final Block BLACK_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BLACK));
    public static final Block RED_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.RED));
    public static final Block GREEN_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.GREEN));
    public static final Block BROWN_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BROWN));
    public static final Block BLUE_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BLUE));
    public static final Block PURPLE_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.PURPLE));
    public static final Block CYAN_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.CYAN));
    public static final Block LIGHT_GRAY_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIGHT_GRAY));
    public static final Block GRAY_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.GRAY));
    public static final Block PINK_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.PINK));
    public static final Block LIME_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIME));
    public static final Block YELLOW_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.YELLOW));
    public static final Block LIGHT_BLUE_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIGHT_BLUE));
    public static final Block MAGENTA_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.MAGENTA));
    public static final Block ORANGE_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.ORANGE));
    public static final Block WHITE_PIPE_BODY = new PipeBodyBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE));
    public static final Block BLACK_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BLACK));
    public static final Block RED_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.RED));
    public static final Block GREEN_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.GREEN));
    public static final Block BROWN_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BROWN));
    public static final Block BLUE_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.BLUE));
    public static final Block PURPLE_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.PURPLE));
    public static final Block CYAN_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.CYAN));
    public static final Block LIGHT_GRAY_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIGHT_GRAY));
    public static final Block GRAY_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.GRAY));
    public static final Block PINK_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.PINK));
    public static final Block LIME_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIME));
    public static final Block YELLOW_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.YELLOW));
    public static final Block LIGHT_BLUE_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.LIGHT_BLUE));
    public static final Block MAGENTA_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.MAGENTA));
    public static final Block ORANGE_WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.copyOf(WHITE_WARP_PIPE).mapColor(MapColor.ORANGE));
    public static final Block FLAGPOLE = new FlagpoleBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.WHITE_GRAY).sounds(BlockSoundGroup.METAL).strength(5.0F, 6.0F).requiresTool().nonOpaque());
    public static final Block RAINBOW_FLAG = new FlagBlock(FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.WHITE));
    public static final Block BLACK_FLAG = new FlagBlock(DyeColor.BLACK, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.BLACK));
    public static final Block RED_FLAG = new FlagBlock(DyeColor.RED, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.RED));
    public static final Block GREEN_FLAG = new FlagBlock(DyeColor.GREEN, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.GREEN));
    public static final Block BROWN_FLAG = new FlagBlock(DyeColor.BROWN, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.BROWN));
    public static final Block BLUE_FLAG = new FlagBlock(DyeColor.BLUE, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.BLUE));
    public static final Block PURPLE_FLAG = new FlagBlock(DyeColor.PURPLE, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.PURPLE));
    public static final Block CYAN_FLAG = new FlagBlock(DyeColor.CYAN, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.CYAN));
    public static final Block LIGHT_GRAY_FLAG = new FlagBlock(DyeColor.LIGHT_GRAY, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.LIGHT_GRAY));
    public static final Block GRAY_FLAG = new FlagBlock(DyeColor.GRAY, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.GRAY));
    public static final Block PINK_FLAG = new FlagBlock(DyeColor.PINK, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.PINK));
    public static final Block LIME_FLAG = new FlagBlock(DyeColor.LIME, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.LIME));
    public static final Block YELLOW_FLAG = new FlagBlock(DyeColor.YELLOW, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.YELLOW));
    public static final Block LIGHT_BLUE_FLAG = new FlagBlock(DyeColor.LIGHT_BLUE, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.LIGHT_BLUE));
    public static final Block MAGENTA_FLAG = new FlagBlock(DyeColor.MAGENTA, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.MAGENTA));
    public static final Block ORANGE_FLAG = new FlagBlock(DyeColor.ORANGE, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.ORANGE));
    public static final Block WHITE_FLAG = new FlagBlock(DyeColor.WHITE, FabricBlockSettings.copyOf(FLAGPOLE).mapColor(MapColor.WHITE));
    public static final Block SHORT_GRASS = new ShortGrassBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.LIME).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.MOSS_CARPET));
    public static final Block RED_GRASS = new RedGrassBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.RED).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block BUSH = new BushBlock(FabricBlockSettings.of(Material.PLANT, MapColor.LIME).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).ticksRandomly());
    public static final Block HORSETAIL = new HorsetailBlock(FabricBlockSettings.of(Material.PLANT, MapColor.TERRACOTTA_LIME).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.CROP));
    public static final Block POTTED_HORSETAIL = new FlowerPotBlock(HORSETAIL, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block GREEN_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.of(Material.PLANT, MapColor.GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).luminance(3).postProcess((state, world, pos) -> true), () -> RegistryEntry.of(ConfiguredFeatures.HUGE_GREEN_MUSHROOM));
    public static final Block POTTED_GREEN_MUSHROOM = new FlowerPotBlock(GREEN_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block YELLOW_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.of(Material.PLANT, MapColor.YELLOW).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS), () -> RegistryEntry.of(ConfiguredFeatures.HUGE_YELLOW_MUSHROOM));
    public static final Block POTTED_YELLOW_MUSHROOM = new FlowerPotBlock(YELLOW_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block YELLOW_SONGFLOWER = new FlowerBlock(StatusEffects.HASTE, 6, FabricBlockSettings.of(Material.PLANT, MapColor.PALE_YELLOW).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_YELLOW_SONGFLOWER = new FlowerPotBlock(YELLOW_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block BLUE_SONGFLOWER = new FlowerBlock(StatusEffects.JUMP_BOOST, 6, FabricBlockSettings.of(Material.PLANT, MapColor.LIGHT_BLUE).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_BLUE_SONGFLOWER = new FlowerPotBlock(BLUE_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block PINK_SONGFLOWER = new FlowerBlock(StatusEffects.REGENERATION, 6, FabricBlockSettings.of(Material.PLANT, MapColor.PINK).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_PINK_SONGFLOWER = new FlowerPotBlock(PINK_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block PAWFLOWER = new FlowerBlock(StatusEffects.SPEED, 6, FabricBlockSettings.of(Material.PLANT, MapColor.WHITE).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_PAWFLOWER = new FlowerPotBlock(PAWFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block FIRE_TULIP = new FireTulipBlock(FabricBlockSettings.of(Material.PLANT, MapColor.ORANGE).offsetType(XZ).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).luminance((state) -> 5));
    public static final Block POTTED_FIRE_TULIP = new FlowerPotBlock(FIRE_TULIP, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque().luminance(4));
    public static final Block YELLOW_FLOWERBED = new FlowerbedBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.YELLOW).nonOpaque().breakInstantly().sounds(BlockSoundGroup.MOSS_CARPET).breakInstantly());
    public static final Block WHITE_FLOWERBED = new FlowerbedBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.WHITE).nonOpaque().breakInstantly().sounds(BlockSoundGroup.MOSS_CARPET).breakInstantly());
    public static final Block AMANITA_SAPLING = new SaplingBlock(new AmanitaGenerator(), FabricBlockSettings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_AMANITA_SAPLING = new FlowerPotBlock(AMANITA_SAPLING, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block DARK_AMANITA_SAPLING = new SaplingBlock(new DarkAmanitaGenerator(), FabricBlockSettings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_DARK_AMANITA_SAPLING = new FlowerPotBlock(DARK_AMANITA_SAPLING, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block BELL_SAPLING = new SaplingBlock(new BellGenerator(), FabricBlockSettings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_BELL_SAPLING = new FlowerPotBlock(BELL_SAPLING, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block SMILEY_STEM = new SmileyStemBlock(FabricBlockSettings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block SMILEY_SUNFLOWER = new SmileySunflowerBlock(FabricBlockSettings.of(Material.PLANT, MapColor.PALE_YELLOW).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_SMILEY_SUNFLOWER = new FlowerPotBlock(SMILEY_SUNFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block SMILEY_SUNFLOWER_SEED = new SmileySunflowerSeedBlock(FabricBlockSettings.of(Material.PLANT).noCollision().ticksRandomly().sounds(BlockSoundGroup.ROOTS));
    public static final Block BEANSTALK_STEM = new BeanstalkStemBlock(FabricBlockSettings.of(Material.PLANT).noCollision().sounds(BlockSoundGroup.VINE));
    public static final Block BEANSTALK = new BeanstalkBlock(FabricBlockSettings.of(Material.PLANT).noCollision().sounds(BlockSoundGroup.VINE));
    public static final Block POTTED_BEANSTALK = new FlowerPotBlock(BEANSTALK, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block MUNCHER = new MuncherBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.BLACK).breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_MUNCHER = new FlowerPotBlock(MUNCHER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block PIT_PLANT = new PitPlantBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.DARK_GREEN).breakInstantly().sounds(BlockSoundGroup.GRASS));
    public static final Block POTTED_PIT_PLANT = new FlowerPotBlock(PIT_PLANT, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block FUZZBALL = new FuzzballBlock(FabricBlockSettings.of(Material.PLANT, MapColor.BLACK).offsetType(XYZ).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.SLIME));
    public static final Block FUZZBUSH = new FuzzbushBlock(FabricBlockSettings.of(Material.PLANT, MapColor.LICHEN_GREEN).offsetType(XYZ).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.MOSS_BLOCK));
    public static final Block STRAWBERRY_CORAL = new StrawberryCoralBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.PINK).strength(1.0F).sounds(BlockSoundGroup.CORAL));
    public static final Block POTTED_STRAWBERRY_CORAL = new FlowerPotBlock(STRAWBERRY_CORAL, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block STAR_CLUSTER = new AmethystClusterBlock(10, 3, FabricBlockSettings.of(Material.AMETHYST, MapColor.CYAN).sounds(BlockSoundGroup.AMETHYST_CLUSTER).strength(1.5f).nonOpaque().luminance(6));
    public static final Block POISON = new PoisonBlock(FabricBlockSettings.of(Material.WATER, MapColor.PURPLE).noCollision().strength(100.0F).dropsNothing());
    public static final Block AMANITA_SIGN = new SignBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).noCollision().strength(1.0f), EnumUtil.AMANITA_SIGN);
    public static final Block DARK_AMANITA_SIGN = new SignBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS).noCollision().strength(1.0f), EnumUtil.DARK_AMANITA_SIGN);
    public static final Block BELL_SIGN = new SignBlock(FabricBlockSettings.copyOf(BELL_PLANKS).noCollision().strength(1.0f), EnumUtil.BELL_SIGN);
    public static final Block AMANITA_WALL_SIGN = new WallSignBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).noCollision().strength(1.0f), EnumUtil.AMANITA_SIGN);
    public static final Block DARK_AMANITA_WALL_SIGN = new WallSignBlock(FabricBlockSettings.copyOf(DARK_AMANITA_PLANKS).noCollision().strength(1.0f), EnumUtil.DARK_AMANITA_SIGN);
    public static final Block BELL_WALL_SIGN = new WallSignBlock(FabricBlockSettings.copyOf(BELL_PLANKS).noCollision().strength(1.0f), EnumUtil.BELL_SIGN);

    private static void registerBlock(String name, Block block) {
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, name), block);
    }

    private static void registerBlock(String name, Block block, int burn, int spread) {
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, name), block);
        FlammableBlockRegistry.getDefaultInstance().add(block, burn, spread);
    }

    public static void register() {
        registerBlock("coin", COIN);
        registerBlock("star_coin", STAR_COIN);
        registerBlock("power_star", POWER_STAR);
        registerBlock("ztar", ZTAR);
        registerBlock("warp_frame", WARP_FRAME);
        registerBlock("reinforced_warp_frame", REINFORCED_WARP_FRAME);
        registerBlock("bowser_lock", BOWSER_LOCK);
        registerBlock("empty_block", EMPTY_BLOCK);
        registerBlock("question_block", QUESTION_BLOCK);
        registerBlock("exclamation_block", EXCLAMATION_BLOCK);
        registerBlock("dash_block", DASH_BLOCK);
        registerBlock("pull_block", PULL_BLOCK);
        registerBlock("propeller_block", PROPELLER_BLOCK);
        registerBlock("spike_trap", SPIKE_TRAP);
        registerBlock("on_off_switch", ON_OFF_SWITCH);
        registerBlock("dotted_line_block", DOTTED_LINE_BLOCK);
        registerBlock("red_dotted_line_block", RED_DOTTED_LINE_BLOCK);
        registerBlock("pow_block", POW_BLOCK);
        registerBlock("p_switch", P_SWITCH);
        registerBlock("stone_torch", STONE_TORCH);
        registerBlock("chincho_torch", CHINCHO_TORCH);
        registerBlock("boo_lantern", BOO_LANTERN);
        registerBlock("girder", GIRDER);
        registerBlock("donut_block", DONUT_BLOCK);
        registerBlock("jump_block", JUMP_BLOCK);
        registerBlock("trampoline", TRAMPOLINE);
        registerBlock("redstone_trampoline", REDSTONE_TRAMPOLINE);
        registerBlock("question_box", QUESTION_BOX);
        registerBlock("star_panel", STAR_PANEL);
        registerBlock("flagpole", FLAGPOLE);
        registerBlock("bronze_ore", BRONZE_ORE);
        registerBlock("raw_bronze_block", RAW_BRONZE_BLOCK);
        registerBlock("bronze_block", BRONZE_BLOCK);
        registerBlock("cerise_block", CERISE_BLOCK);
        registerBlock("cerise_bricks", CERISE_BRICKS);
        registerBlock("cerise_tiles", CERISE_TILES);
        registerBlock("bronze_slab", BRONZE_SLAB);
        registerBlock("bronze_stairs", BRONZE_STAIRS);
        registerBlock("white_bronze", WHITE_BRONZE);
        registerBlock("orange_bronze", ORANGE_BRONZE);
        registerBlock("magenta_bronze", MAGENTA_BRONZE);
        registerBlock("light_blue_bronze", LIGHT_BLUE_BRONZE);
        registerBlock("yellow_bronze", YELLOW_BRONZE);
        registerBlock("lime_bronze", LIME_BRONZE);
        registerBlock("pink_bronze", PINK_BRONZE);
        registerBlock("gray_bronze", GRAY_BRONZE);
        registerBlock("light_gray_bronze", LIGHT_GRAY_BRONZE);
        registerBlock("cyan_bronze", CYAN_BRONZE);
        registerBlock("purple_bronze", PURPLE_BRONZE);
        registerBlock("blue_bronze", BLUE_BRONZE);
        registerBlock("brown_bronze", BROWN_BRONZE);
        registerBlock("green_bronze", GREEN_BRONZE);
        registerBlock("red_bronze", RED_BRONZE);
        registerBlock("black_bronze", BLACK_BRONZE);
        registerBlock("toadstool_soil", TOADSTOOL_SOIL);
        registerBlock("coarse_toadstool_soil", COARSE_TOADSTOOL_SOIL);
        registerBlock("toadstool_grass", TOADSTOOL_GRASS);
        registerBlock("toadstool_path", TOADSTOOL_PATH);
        registerBlock("toadstool_turf", TOADSTOOL_TURF);
        registerBlock("cherry_soil", CHERRY_SOIL);
        registerBlock("cherry_grass", CHERRY_GRASS);
        registerBlock("cherry_path", CHERRY_PATH);
        registerBlock("gritzy_sand", GRITZY_SAND);
        registerBlock("quicksand", QUICKSAND);
        registerBlock("gritzy_sandstone", GRITZY_SANDSTONE);
        registerBlock("smooth_gritzy_sandstone", SMOOTH_GRITZY_SANDSTONE);
        registerBlock("cut_gritzy_sandstone", CUT_GRITZY_SANDSTONE);
        registerBlock("chiseled_gritzy_sandstone", CHISELED_GRITZY_SANDSTONE);
        registerBlock("gritzy_sandstone_slab", GRITZY_SANDSTONE_SLAB);
        registerBlock("gritzy_sandstone_stairs", GRITZY_SANDSTONE_STAIRS);
        registerBlock("charrock", CHARROCK);
        registerBlock("cloud_block", CLOUD_BLOCK);
        registerBlock("happy_cloud", HAPPY_CLOUD);
        registerBlock("cloud_slab", CLOUD_SLAB);
        registerBlock("cloud_stairs", CLOUD_STAIRS);
        registerBlock("toadstone", TOADSTONE);
        registerBlock("smooth_toadstone", SMOOTH_TOADSTONE);
        registerBlock("toadstone_bricks", TOADSTONE_BRICKS);
        registerBlock("chiseled_toadstone_bricks", CHISELED_TOADSTONE_BRICKS);
        registerBlock("toadstone_brick_slab", TOADSTONE_BRICK_SLAB);
        registerBlock("toadstone_brick_stairs", TOADSTONE_BRICK_STAIRS);
        registerBlock("toadstone_brick_wall", TOADSTONE_BRICK_WALL);
        registerBlock("gloomstone", GLOOMSTONE);
        registerBlock("smooth_gloomstone", SMOOTH_GLOOMSTONE);
        registerBlock("gloomstone_bricks", GLOOMSTONE_BRICKS);
        registerBlock("chiseled_gloomstone_bricks", CHISELED_GLOOMSTONE_BRICKS);
        registerBlock("gloomstone_brick_slab", GLOOMSTONE_BRICK_SLAB);
        registerBlock("gloomstone_brick_stairs", GLOOMSTONE_BRICK_STAIRS);
        registerBlock("gloomstone_brick_wall", GLOOMSTONE_BRICK_WALL);
        registerBlock("seastone", SEASTONE);
        registerBlock("seastone_bricks", SEASTONE_BRICKS);
        registerBlock("chiseled_seastone_bricks", CHISELED_SEASTONE_BRICKS);
        registerBlock("seastone_brick_slab", SEASTONE_BRICK_SLAB);
        registerBlock("seastone_brick_stairs", SEASTONE_BRICK_STAIRS);
        registerBlock("seastone_brick_wall", SEASTONE_BRICK_WALL);
        registerBlock("hardstone", HARDSTONE);
        registerBlock("hardstone_slab", HARDSTONE_SLAB);
        registerBlock("hardstone_stairs", HARDSTONE_STAIRS);
        registerBlock("polished_hardstone", POLISHED_HARDSTONE);
        registerBlock("hardstone_pillar", HARDSTONE_PILLAR);
        registerBlock("chiseled_hardstone", CHISELED_HARDSTONE);
        registerBlock("polished_hardstone_slab", POLISHED_HARDSTONE_SLAB);
        registerBlock("polished_hardstone_stairs", POLISHED_HARDSTONE_STAIRS);
        registerBlock("hardstone_bricks", HARDSTONE_BRICKS);
        registerBlock("chiseled_hardstone_bricks", CHISELED_HARDSTONE_BRICKS);
        registerBlock("cracked_hardstone_bricks", CRACKED_HARDSTONE_BRICKS);
        registerBlock("hardstone_brick_slab", HARDSTONE_BRICK_SLAB);
        registerBlock("hardstone_brick_stairs", HARDSTONE_BRICK_STAIRS);
        registerBlock("hardstone_brick_wall", HARDSTONE_BRICK_WALL);
        registerBlock("royalite", ROYALITE);
        registerBlock("royalite_bricks", ROYALITE_BRICKS);
        registerBlock("chiseled_royalite_bricks", CHISELED_ROYALITE_BRICKS);
        registerBlock("royalite_brick_slab", ROYALITE_BRICK_SLAB);
        registerBlock("royalite_brick_stairs", ROYALITE_BRICK_STAIRS);
        registerBlock("royalite_brick_wall", ROYALITE_BRICK_WALL);
        registerBlock("golden_bricks", GOLDEN_BRICKS);
        registerBlock("golden_tiles", GOLDEN_TILES);
        registerBlock("golden_brick_slab", GOLDEN_BRICK_SLAB);
        registerBlock("golden_brick_stairs", GOLDEN_BRICK_STAIRS);
        registerBlock("golden_brick_wall", GOLDEN_BRICK_WALL);
        registerBlock("crystal_bricks", CRYSTAL_BRICKS);
        registerBlock("crystal_brick_slab", CRYSTAL_BRICK_SLAB);
        registerBlock("crystal_brick_stairs", CRYSTAL_BRICK_STAIRS);
        registerBlock("crystal_brick_wall", CRYSTAL_BRICK_WALL);
        registerBlock("vanillate", VANILLATE);
        registerBlock("topped_vanillate", TOPPED_VANILLATE);
        registerBlock("coal_topped_vanillate", COAL_TOPPED_VANILLATE);
        registerBlock("iron_topped_vanillate", IRON_TOPPED_VANILLATE);
        registerBlock("gold_topped_vanillate", GOLD_TOPPED_VANILLATE);
        registerBlock("amethyst_topped_vanillate", AMETHYST_TOPPED_VANILLATE);
        registerBlock("vanillate_crumble", VANILLATE_CRUMBLE);
        registerBlock("vanillate_bricks", VANILLATE_BRICKS);
        registerBlock("vanillate_tiles", VANILLATE_TILES);
        registerBlock("amanita_log", AMANITA_LOG, 5, 5);
        registerBlock("amanita_wood", AMANITA_WOOD, 5, 5);
        registerBlock("stripped_amanita_log", STRIPPED_AMANITA_LOG, 5, 5);
        registerBlock("stripped_amanita_wood", STRIPPED_AMANITA_WOOD, 5, 5);
        registerBlock("amanita_planks", AMANITA_PLANKS, 5, 20);
        registerBlock("amanita_slab", AMANITA_SLAB, 5, 20);
        registerBlock("amanita_stairs", AMANITA_STAIRS, 5, 20);
        registerBlock("amanita_door", AMANITA_DOOR);
        registerBlock("amanita_trapdoor", AMANITA_TRAPDOOR);
        registerBlock("amanita_fence", AMANITA_FENCE, 5, 20);
        registerBlock("amanita_fence_gate", AMANITA_FENCE_GATE, 5, 20);
        registerBlock("amanita_button", AMANITA_BUTTON);
        registerBlock("amanita_pressure_plate", AMANITA_PRESSURE_PLATE);
        registerBlock("amanita_leaves", AMANITA_LEAVES, 30, 60);
        registerBlock("fruiting_amanita_leaves", FRUITING_AMANITA_LEAVES, 30, 60);
        registerBlock("dark_amanita_log", DARK_AMANITA_LOG, 5, 5);
        registerBlock("dark_amanita_wood", DARK_AMANITA_WOOD, 5, 5);
        registerBlock("stripped_dark_amanita_log", STRIPPED_DARK_AMANITA_LOG, 5, 5);
        registerBlock("stripped_dark_amanita_wood", STRIPPED_DARK_AMANITA_WOOD, 5, 5);
        registerBlock("dark_amanita_planks", DARK_AMANITA_PLANKS, 5, 20);
        registerBlock("dark_amanita_slab", DARK_AMANITA_SLAB, 5, 20);
        registerBlock("dark_amanita_stairs", DARK_AMANITA_STAIRS, 5, 20);
        registerBlock("dark_amanita_door", DARK_AMANITA_DOOR);
        registerBlock("dark_amanita_trapdoor", DARK_AMANITA_TRAPDOOR);
        registerBlock("dark_amanita_fence", DARK_AMANITA_FENCE, 5, 20);
        registerBlock("dark_amanita_fence_gate", DARK_AMANITA_FENCE_GATE, 5, 20);
        registerBlock("dark_amanita_button", DARK_AMANITA_BUTTON);
        registerBlock("dark_amanita_pressure_plate", DARK_AMANITA_PRESSURE_PLATE);
        registerBlock("dark_amanita_leaves", DARK_AMANITA_LEAVES, 30, 60);
        registerBlock("fruiting_dark_amanita_leaves", FRUITING_DARK_AMANITA_LEAVES, 30, 60);
        registerBlock("bell_log", BELL_LOG, 5, 5);
        registerBlock("bell_wood", BELL_WOOD, 5, 5);
        registerBlock("stripped_bell_log", STRIPPED_BELL_LOG, 5, 5);
        registerBlock("stripped_bell_wood", STRIPPED_BELL_WOOD, 5, 5);
        registerBlock("bell_planks", BELL_PLANKS, 5, 20);
        registerBlock("bell_slab", BELL_SLAB, 5, 20);
        registerBlock("bell_stairs", BELL_STAIRS, 5, 20);
        registerBlock("bell_door", BELL_DOOR);
        registerBlock("bell_trapdoor", BELL_TRAPDOOR);
        registerBlock("bell_fence", BELL_FENCE, 5, 20);
        registerBlock("bell_fence_gate", BELL_FENCE_GATE, 5, 20);
        registerBlock("bell_button", BELL_BUTTON);
        registerBlock("bell_pressure_plate", BELL_PRESSURE_PLATE);
        registerBlock("bell_cap", BELL_CAP, 30, 60);
        registerBlock("darkened_bell_cap", DARKENED_BELL_CAP, 30, 60);
        registerBlock("green_mushroom_block", GREEN_MUSHROOM_BLOCK);
        registerBlock("yellow_mushroom_block", YELLOW_MUSHROOM_BLOCK);
        registerBlock("beanstalk_block", BEANSTALK_BLOCK, 1, 5);
        registerBlock("strawberry_coral_block", STRAWBERRY_CORAL_BLOCK);
        registerBlock("jellybeam", JELLYBEAM);
        registerBlock("frozen_muncher", FROZEN_MUNCHER);
        registerBlock("glow_block", GLOW_BLOCK);
        registerBlock("fake_block", FAKE_BLOCK);
        registerBlock("bill_blaster", BILL_BLASTER);
        registerBlock("rainbow_tiles", RAINBOW_TILES);
        registerBlock("rainbow_tile_slab", RAINBOW_TILE_SLAB);
        registerBlock("rainbow_tile_stairs", RAINBOW_TILE_STAIRS);
        registerBlock("yoshi_egg", YOSHI_EGG);
        registerBlock("lil_oink_egg", LIL_OINK_EGG);
        registerBlock("white_warp_pipe", WHITE_WARP_PIPE);
        registerBlock("orange_warp_pipe", ORANGE_WARP_PIPE);
        registerBlock("magenta_warp_pipe", MAGENTA_WARP_PIPE);
        registerBlock("light_blue_warp_pipe", LIGHT_BLUE_WARP_PIPE);
        registerBlock("yellow_warp_pipe", YELLOW_WARP_PIPE);
        registerBlock("lime_warp_pipe", LIME_WARP_PIPE);
        registerBlock("pink_warp_pipe", PINK_WARP_PIPE);
        registerBlock("gray_warp_pipe", GRAY_WARP_PIPE);
        registerBlock("light_gray_warp_pipe", LIGHT_GRAY_WARP_PIPE);
        registerBlock("cyan_warp_pipe", CYAN_WARP_PIPE);
        registerBlock("purple_warp_pipe", PURPLE_WARP_PIPE);
        registerBlock("blue_warp_pipe", BLUE_WARP_PIPE);
        registerBlock("brown_warp_pipe", BROWN_WARP_PIPE);
        registerBlock("green_warp_pipe", GREEN_WARP_PIPE);
        registerBlock("red_warp_pipe", RED_WARP_PIPE);
        registerBlock("black_warp_pipe", BLACK_WARP_PIPE);
        registerBlock("white_pipe_body", WHITE_PIPE_BODY);
        registerBlock("orange_pipe_body", ORANGE_PIPE_BODY);
        registerBlock("magenta_pipe_body", MAGENTA_PIPE_BODY);
        registerBlock("light_blue_pipe_body", LIGHT_BLUE_PIPE_BODY);
        registerBlock("yellow_pipe_body", YELLOW_PIPE_BODY);
        registerBlock("lime_pipe_body", LIME_PIPE_BODY);
        registerBlock("pink_pipe_body", PINK_PIPE_BODY);
        registerBlock("gray_pipe_body", GRAY_PIPE_BODY);
        registerBlock("light_gray_pipe_body", LIGHT_GRAY_PIPE_BODY);
        registerBlock("cyan_pipe_body", CYAN_PIPE_BODY);
        registerBlock("purple_pipe_body", PURPLE_PIPE_BODY);
        registerBlock("blue_pipe_body", BLUE_PIPE_BODY);
        registerBlock("brown_pipe_body", BROWN_PIPE_BODY);
        registerBlock("green_pipe_body", GREEN_PIPE_BODY);
        registerBlock("red_pipe_body", RED_PIPE_BODY);
        registerBlock("black_pipe_body", BLACK_PIPE_BODY);
        registerBlock("white_flag", WHITE_FLAG);
        registerBlock("orange_flag", ORANGE_FLAG);
        registerBlock("magenta_flag", MAGENTA_FLAG);
        registerBlock("light_blue_flag", LIGHT_BLUE_FLAG);
        registerBlock("yellow_flag", YELLOW_FLAG);
        registerBlock("lime_flag", LIME_FLAG);
        registerBlock("pink_flag", PINK_FLAG);
        registerBlock("gray_flag", GRAY_FLAG);
        registerBlock("light_gray_flag", LIGHT_GRAY_FLAG);
        registerBlock("cyan_flag", CYAN_FLAG);
        registerBlock("purple_flag", PURPLE_FLAG);
        registerBlock("blue_flag", BLUE_FLAG);
        registerBlock("brown_flag", BROWN_FLAG);
        registerBlock("green_flag", GREEN_FLAG);
        registerBlock("red_flag", RED_FLAG);
        registerBlock("black_flag", BLACK_FLAG);
        registerBlock("rainbow_flag", RAINBOW_FLAG);
        registerBlock("short_grass", SHORT_GRASS, 60, 100);
        registerBlock("red_grass", RED_GRASS, 60, 100);
        registerBlock("bush", BUSH, 60, 100);
        registerBlock("horsetail", HORSETAIL, 60, 100);
        registerBlock("green_mushroom", GREEN_MUSHROOM);
        registerBlock("yellow_mushroom", YELLOW_MUSHROOM);
        registerBlock("yellow_songflower", YELLOW_SONGFLOWER, 60, 100);
        registerBlock("blue_songflower", BLUE_SONGFLOWER, 60, 100);
        registerBlock("pink_songflower", PINK_SONGFLOWER, 60, 100);
        registerBlock("pawflower", PAWFLOWER, 60, 100);
        registerBlock("fire_tulip", FIRE_TULIP, 60, 0);
        registerBlock("yellow_flowerbed", YELLOW_FLOWERBED, 60, 100);
        registerBlock("white_flowerbed", WHITE_FLOWERBED, 60, 100);
        registerBlock("amanita_sapling", AMANITA_SAPLING);
        registerBlock("dark_amanita_sapling", DARK_AMANITA_SAPLING);
        registerBlock("bell_sapling", BELL_SAPLING);
        registerBlock("smiley_stem", SMILEY_STEM, 60, 100);
        registerBlock("smiley_sunflower", SMILEY_SUNFLOWER, 60, 100);
        registerBlock("smiley_sunflower_seed", SMILEY_SUNFLOWER_SEED);
        registerBlock("beanstalk", BEANSTALK, 60, 100);
        registerBlock("beanstalk_stem", BEANSTALK_STEM, 60, 100);
        registerBlock("muncher", MUNCHER);
        registerBlock("pit_plant", PIT_PLANT);
        registerBlock("fuzzball", FUZZBALL);
        registerBlock("fuzzbush", FUZZBUSH);
        registerBlock("strawberry_coral", STRAWBERRY_CORAL);
        registerBlock("star_cluster", STAR_CLUSTER);
        registerBlock("potted_horsetail", POTTED_HORSETAIL);
        registerBlock("potted_green_mushroom", POTTED_GREEN_MUSHROOM);
        registerBlock("potted_yellow_mushroom", POTTED_YELLOW_MUSHROOM);
        registerBlock("potted_yellow_songflower", POTTED_YELLOW_SONGFLOWER);
        registerBlock("potted_blue_songflower", POTTED_BLUE_SONGFLOWER);
        registerBlock("potted_pink_songflower", POTTED_PINK_SONGFLOWER);
        registerBlock("potted_pawflower", POTTED_PAWFLOWER);
        registerBlock("potted_fire_tulip", POTTED_FIRE_TULIP);
        registerBlock("potted_amanita_sapling", POTTED_AMANITA_SAPLING);
        registerBlock("potted_dark_amanita_sapling", POTTED_DARK_AMANITA_SAPLING);
        registerBlock("potted_bell_sapling", POTTED_BELL_SAPLING);
        registerBlock("potted_smiley_sunflower", POTTED_SMILEY_SUNFLOWER);
        registerBlock("potted_beanstalk", POTTED_BEANSTALK);
        registerBlock("potted_muncher", POTTED_MUNCHER);
        registerBlock("potted_pit_plant", POTTED_PIT_PLANT);
        registerBlock("potted_strawberry_coral", POTTED_STRAWBERRY_CORAL);
        registerBlock("poison", POISON);
        registerBlock("amanita_sign", AMANITA_SIGN);
        registerBlock("amanita_wall_sign", AMANITA_WALL_SIGN);
        registerBlock("dark_amanita_sign", DARK_AMANITA_SIGN);
        registerBlock("dark_amanita_wall_sign", DARK_AMANITA_WALL_SIGN);
        registerBlock("bell_sign", BELL_SIGN);
        registerBlock("bell_wall_sign", BELL_WALL_SIGN);
    }

    private static PillarBlock createLogBlock(MapColor topMapColor, MapColor sideMapColor) {
        return new LogBlock(FabricBlockSettings.of(Material.WOOD, (state) -> state.get(PillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).strength(2.0F).sounds(BlockSoundGroup.WOOD));
    }

    private static LeavesBlock createLeavesBlock() {
        return new LeavesBlock(FabricBlockSettings.of(Material.LEAVES).strength(0.2F).ticksRandomly().sounds(BlockSoundGroup.GRASS).nonOpaque().allowsSpawning((state, world, pos, type) -> type == EntityType.OCELOT || type == EntityType.PARROT || type == ModEntities.BOB_OMB).suffocates((state, world, pos) -> false).blockVision((state, world, pos) -> false));
    }

    private static LeavesBlock createLeavesBlock(MapColor mapColor) {
        return new BellCapBlock(FabricBlockSettings.of(Material.LEAVES).mapColor(mapColor).strength(0.2F).ticksRandomly().sounds(SoundGroups.BELL_CAP).nonOpaque().allowsSpawning((state, world, pos, type) -> type == EntityType.OCELOT || type == EntityType.PARROT || type == ModEntities.BOB_OMB).suffocates((state, world, pos) -> false).blockVision((state, world, pos) -> false));
    }

    private static ToIntFunction<BlockState> createLightLevelFromLitBlockState(int unlitLevel, int litLevel) {
        return state -> state.get(Properties.LIT) ? litLevel : unlitLevel;
    }
}
